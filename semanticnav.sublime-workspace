{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"font-",
				"font-family"
			],
			[
				"font",
				"font-size"
			],
			[
				"order",
				"orderproduct"
			],
			[
				"l",
				"location"
			],
			[
				"orde",
				"orderID"
			],
			[
				"sum",
				"sumOfDigits"
			],
			[
				"perm",
				"permutations"
			]
		]
	},
	"buffers":
	[
		{
			"file": "skel.html",
			"settings":
			{
				"buffer_size": 912,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 575.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/seanmacdonald/REPOS/semanticnav"
	],
	"file_history":
	[
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/seanmacdonald/REPOS/semanticnav/skel.html",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/seanmacdonald/REPOS/numops/app/views/addproducttoorder.html",
		"/Users/seanmacdonald/REPOS/numops/app/views/createorder.html",
		"/Users/seanmacdonald/REPOS/numops/app/partials/addproduct.html",
		"/Users/seanmacdonald/REPOS/numops/app/views/main.html",
		"/Users/seanmacdonald/REPOS/numops/Gruntfile.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/orders.js",
		"/Users/seanmacdonald/REPOS/numops/app/index.html",
		"/Users/seanmacdonald/REPOS/numops/.gitignore",
		"/Users/seanmacdonald/REPOS/numops/app/views/order.html",
		"/Users/seanmacdonald/REPOS/numops/app/partials/order_details.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/order.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/addproduct.html",
		"/Users/seanmacdonald/REPOS/numops/app/views/order_details.html.old",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/filters/prettyjson.js",
		"/Users/seanmacdonald/REPOS/numops/app/styles/main.css",
		"/Users/seanmacdonald/REPOS/numops/app/views/orders.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/orders.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/app.js",
		"/Users/seanmacdonald/REPOS/numops/dist/scripts/vendor.328ddfbd.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/products.js",
		"/Users/seanmacdonald/REPOS/numops/package.json",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/orderstates.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/products.js",
		"/Users/seanmacdonald/REPOS/numops/.private",
		"/Applications/Sublime Text.app/Contents/MacOS/changelog.txt",
		"/Users/seanmacdonald/Dropbox/code/code-eval/data-recovery/app.js",
		"/Users/seanmacdonald/code/xad/i2.txt",
		"/Users/seanmacdonald/code/xad/input.txt",
		"/Users/seanmacdonald/code/xad/app.js",
		"/Users/seanmacdonald/Downloads/canon_feed_new_0227.xml",
		"/Users/seanmacdonald/REPOS/narcissus/spidermonkey/init.js",
		"/Users/seanmacdonald/REPOS/Framework/functions.global.php",
		"/Users/seanmacdonald/REPOS/sean9999.github.io/index.html",
		"/Users/seanmacdonald/REPOS/brain.js/public/static/basic.html",
		"/Users/seanmacdonald/REPOS/brain.js/views/navigation.jade",
		"/Users/seanmacdonald/REPOS/brain.js/public/flatui/index.html",
		"/Users/seanmacdonald/REPOS/codenamepicker/adjectives.txt",
		"/Users/seanmacdonald/REPOS/codenamepicker/server.js",
		"/Users/seanmacdonald/REPOS/codenamepicker/package.json",
		"/Users/seanmacdonald/REPOS/codenamepicker/env.js",
		"/Users/seanmacdonald/REPOS/brain.js/server.js",
		"/Users/seanmacdonald/REPOS/brain.js/views/index.jade",
		"/Users/seanmacdonald/REPOS/brain.js/package.json",
		"/Users/seanmacdonald/REPOS/brain.js/inline.js",
		"/Users/seanmacdonald/REPOS/brain.js/server-select.js",
		"/Users/seanmacdonald/REPOS/brain.js/test.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"views",
			"units",
			"order_product.",
			"orderProduct",
			"purc",
			"order_product",
			"order.product",
			"order.",
			"Quant",
			"product",
			"hefty",
			"var express = require('express'),\n    fs      = require('fs');\n	mongodb	= require('mongodb');\n\nvar App = function() {\n    var self = this;\n    self.setupVariables = function() {\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n        if (typeof self.ipaddress === \"undefined\") {\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n            self.mongo = {\n	            \"host\": \"localhost\",\n	            \"port\": 27017,\n	            \"username\": null,\n	            \"passwd\": null\n            };\n            self.connection_url = 'mongodb://' + self.mongo.host + ':' + self.mongo.port;\n        } else {\n            self.mongo = {\n	            \"host\": process.env.OPENSHIFT_MONGODB_DB_HOST,\n	            \"port\": process.env.OPENSHIFT_MONGODB_DB_PORT,\n	            \"username\": process.env.OPENSHIFT_MONGODB_DB_USERNAME,\n	            \"passwd\": process.env.OPENSHIFT_MONGODB_DB_PASSWORD\n            };\n            self.connection_url = 'mongodb://' + self.mongo.username + ':' + self.mongo.passwd + '@' + self.mongo.host + ':' + self.mongo.port;\n        } \n    };\n    //	cache\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n        self.zcache['index.html'] = fs.readFileSync('./index.html');\n        self.zcache['css/home.css'] = fs.readFileSync('./css/home.css');\n        self.zcache['css/font-awesome.min.css'] = fs.readFileSync('./css/font-awesome.min.css');\n        self.zcache['js/app.js'] = fs.readFileSync('./js/app.js');\n    };\n    self.cache_get = function(key) { return self.zcache[key]; };\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n    self.setupTerminationHandlers = function(){\n        process.on('exit', function() { self.terminator(); });\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n    //	db\n    self.connectToDB = function() {\n		mongodb.Db.connect(self.connection_url, function(err, db) {\n			if (err) console.log(err);\n	    	var animalCol = db.collection(\"animals\");\n	    	var adjCol = db.collection(\"adjectives\");\n	    	animalCol.remove({}, function() {});\n	    	adjCol.remove({}, function() {});\n	    	var animals = fs.readFileSync(\"./animals.txt\", \"utf8\").split(\"\\n\");\n	    	var adjectives = fs.readFileSync(\"./adjectives.txt\", \"utf8\").split(\"\\n\");\n		    db.createCollection(\"animals\", function(err, collection) {\n		    	if (err) {\n			    	console.log('create collection didnt work',err);\n		    	}\n		    	for (var i = 0; i < animals.length; i++) {\n		    		if (animals[i] !== '') {\n			    		collection.insert({\"name\":animals[i]}, function(){});		\n		    		}\n		    	}\n		    });\n		    db.createCollection(\"adjectives\", function(err, collection) {\n			    for (var i = 0; i < adjectives.length; i++) {\n				    if (adjectives[i] != '') {\n					    var adj = adjectives[i].split(\" \")[1];\n					    (function(adj) {\n							var result = collection.findOne({name: adj}, function(err, doc){\n							    if (typeof doc !== null) {\n									collection.insert({name: adj}, console.log);    \n							    }\n						    });		    \n					    })(adj);				    \n				    }\n			    }\n		    });		\n		});\n    };\n    //	routing\n    self.createRoutes = function() {\n        self.routes = { };\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('index.html'));\n        };\n        self.routes['/js/app.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        res.send(self.cache_get('js/app.js'));\n        };\n        self.routes['/js/adjectives.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        mongodb.Db.connect(self.connection_url, function(err, db) {\n		        var animals_cursor = db.collection('adjectives').find({});\n		        var result = animals_cursor.toArray( function(err,docs) {\n		        	res.send(\n		        		'var adjectives = '\n		        		+ JSON.stringify( docs.map(function(d){ return d.name; }))\n		        		+ ';'\n		        	);\n			    });\n	        });\n        };\n        self.routes['/js/animals.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        mongodb.Db.connect(self.connection_url, function(err, db) {\n		        var animals_cursor = db.collection('animals').find({});\n		        var result = animals_cursor.toArray( function(err,docs) {\n		        	res.send(\n		        		'var animals = '\n		        		+ JSON.stringify( docs.map(function(d){ return d.name; }))\n		        		+ ';'\n		        	);\n			    });\n	        });\n        }\n    };\n    self.initializeServer = function() {\n        self.createRoutes();\n        self.app = express.createServer();\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n        self.app.get( /^\\/css\\/.*\\.css$/, function(req,res) {\n	        var cachekey = req.url.replace(/^\\//,'');\n	        res.setHeader('Content-Type', 'text/css');\n	        res.send(self.cache_get(cachekey));\n        });\n        self.app.get( /^\\/font\\//, function(req,res) {\n	        res.setHeader('Content-Type', 'application/x-font-woff');\n	        res.send( fs.readFileSync('.' + req.url) );\n        });\n    };\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n        self.connectToDB();\n        // Create the express server and routes.\n        self.initializeServer();\n    };\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n};\n\nvar zapp = new App();\nzapp.initialize();\nzapp.start();",
			"	"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"orderproduct.",
			"order_product",
			"orderProduct",
			"order_product"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"follow_symlinks": true,
			"path": "/Users/seanmacdonald/REPOS/semanticnav"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "skel.html",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 912,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 267.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
